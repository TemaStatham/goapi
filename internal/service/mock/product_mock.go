// Code generated by MockGen. DO NOT EDIT.
// Source: product.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	model "goapi/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAdderProduct is a mock of AdderProduct interface.
type MockAdderProduct struct {
	ctrl     *gomock.Controller
	recorder *MockAdderProductMockRecorder
}

// MockAdderProductMockRecorder is the mock recorder for MockAdderProduct.
type MockAdderProductMockRecorder struct {
	mock *MockAdderProduct
}

// NewMockAdderProduct creates a new mock instance.
func NewMockAdderProduct(ctrl *gomock.Controller) *MockAdderProduct {
	mock := &MockAdderProduct{ctrl: ctrl}
	mock.recorder = &MockAdderProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdderProduct) EXPECT() *MockAdderProductMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockAdderProduct) AddProduct(ctx context.Context, name string, categoryies []string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, name, categoryies)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockAdderProductMockRecorder) AddProduct(ctx, name, categoryies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockAdderProduct)(nil).AddProduct), ctx, name, categoryies)
}

// AddProducts mocks base method.
func (m *MockAdderProduct) AddProducts(ctx context.Context, products []model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProducts", ctx, products)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProducts indicates an expected call of AddProducts.
func (mr *MockAdderProductMockRecorder) AddProducts(ctx, products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProducts", reflect.TypeOf((*MockAdderProduct)(nil).AddProducts), ctx, products)
}

// MockDeleterProduct is a mock of DeleterProduct interface.
type MockDeleterProduct struct {
	ctrl     *gomock.Controller
	recorder *MockDeleterProductMockRecorder
}

// MockDeleterProductMockRecorder is the mock recorder for MockDeleterProduct.
type MockDeleterProductMockRecorder struct {
	mock *MockDeleterProduct
}

// NewMockDeleterProduct creates a new mock instance.
func NewMockDeleterProduct(ctrl *gomock.Controller) *MockDeleterProduct {
	mock := &MockDeleterProduct{ctrl: ctrl}
	mock.recorder = &MockDeleterProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleterProduct) EXPECT() *MockDeleterProductMockRecorder {
	return m.recorder
}

// DeleteProduct mocks base method.
func (m *MockDeleterProduct) DeleteProduct(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockDeleterProductMockRecorder) DeleteProduct(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockDeleterProduct)(nil).DeleteProduct), ctx, id)
}

// MockUpdaterProduct is a mock of UpdaterProduct interface.
type MockUpdaterProduct struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterProductMockRecorder
}

// MockUpdaterProductMockRecorder is the mock recorder for MockUpdaterProduct.
type MockUpdaterProductMockRecorder struct {
	mock *MockUpdaterProduct
}

// NewMockUpdaterProduct creates a new mock instance.
func NewMockUpdaterProduct(ctrl *gomock.Controller) *MockUpdaterProduct {
	mock := &MockUpdaterProduct{ctrl: ctrl}
	mock.recorder = &MockUpdaterProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdaterProduct) EXPECT() *MockUpdaterProductMockRecorder {
	return m.recorder
}

// UpdateProductCategoryies mocks base method.
func (m *MockUpdaterProduct) UpdateProductCategoryies(ctx context.Context, id int64, categoryies []model.Category) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductCategoryies", ctx, id, categoryies)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductCategoryies indicates an expected call of UpdateProductCategoryies.
func (mr *MockUpdaterProductMockRecorder) UpdateProductCategoryies(ctx, id, categoryies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductCategoryies", reflect.TypeOf((*MockUpdaterProduct)(nil).UpdateProductCategoryies), ctx, id, categoryies)
}

// UpdateProductName mocks base method.
func (m *MockUpdaterProduct) UpdateProductName(ctx context.Context, id int64, name string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductName", ctx, id, name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductName indicates an expected call of UpdateProductName.
func (mr *MockUpdaterProductMockRecorder) UpdateProductName(ctx, id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductName", reflect.TypeOf((*MockUpdaterProduct)(nil).UpdateProductName), ctx, id, name)
}

// MockGetterProduct is a mock of GetterProduct interface.
type MockGetterProduct struct {
	ctrl     *gomock.Controller
	recorder *MockGetterProductMockRecorder
}

// MockGetterProductMockRecorder is the mock recorder for MockGetterProduct.
type MockGetterProductMockRecorder struct {
	mock *MockGetterProduct
}

// NewMockGetterProduct creates a new mock instance.
func NewMockGetterProduct(ctrl *gomock.Controller) *MockGetterProduct {
	mock := &MockGetterProduct{ctrl: ctrl}
	mock.recorder = &MockGetterProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetterProduct) EXPECT() *MockGetterProductMockRecorder {
	return m.recorder
}

// GetAllProducts mocks base method.
func (m *MockGetterProduct) GetAllProducts(ctx context.Context) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts", ctx)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockGetterProductMockRecorder) GetAllProducts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockGetterProduct)(nil).GetAllProducts), ctx)
}

// GetCategoryProducts mocks base method.
func (m *MockGetterProduct) GetCategoryProducts(ctx context.Context, category string) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryProducts", ctx, category)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryProducts indicates an expected call of GetCategoryProducts.
func (mr *MockGetterProductMockRecorder) GetCategoryProducts(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryProducts", reflect.TypeOf((*MockGetterProduct)(nil).GetCategoryProducts), ctx, category)
}
