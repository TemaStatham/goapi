// Code generated by MockGen. DO NOT EDIT.
// Source: category.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	model "goapi/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAdderCategory is a mock of AdderCategory interface.
type MockAdderCategory struct {
	ctrl     *gomock.Controller
	recorder *MockAdderCategoryMockRecorder
}

// MockAdderCategoryMockRecorder is the mock recorder for MockAdderCategory.
type MockAdderCategoryMockRecorder struct {
	mock *MockAdderCategory
}

// NewMockAdderCategory creates a new mock instance.
func NewMockAdderCategory(ctrl *gomock.Controller) *MockAdderCategory {
	mock := &MockAdderCategory{ctrl: ctrl}
	mock.recorder = &MockAdderCategoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdderCategory) EXPECT() *MockAdderCategoryMockRecorder {
	return m.recorder
}

// AddCategory mocks base method.
func (m *MockAdderCategory) AddCategory(ctx context.Context, name string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCategory", ctx, name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCategory indicates an expected call of AddCategory.
func (mr *MockAdderCategoryMockRecorder) AddCategory(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCategory", reflect.TypeOf((*MockAdderCategory)(nil).AddCategory), ctx, name)
}

// MockDeleterCategory is a mock of DeleterCategory interface.
type MockDeleterCategory struct {
	ctrl     *gomock.Controller
	recorder *MockDeleterCategoryMockRecorder
}

// MockDeleterCategoryMockRecorder is the mock recorder for MockDeleterCategory.
type MockDeleterCategoryMockRecorder struct {
	mock *MockDeleterCategory
}

// NewMockDeleterCategory creates a new mock instance.
func NewMockDeleterCategory(ctrl *gomock.Controller) *MockDeleterCategory {
	mock := &MockDeleterCategory{ctrl: ctrl}
	mock.recorder = &MockDeleterCategoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleterCategory) EXPECT() *MockDeleterCategoryMockRecorder {
	return m.recorder
}

// DeleteCategory mocks base method.
func (m *MockDeleterCategory) DeleteCategory(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockDeleterCategoryMockRecorder) DeleteCategory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockDeleterCategory)(nil).DeleteCategory), ctx, id)
}

// MockUpdaterCategory is a mock of UpdaterCategory interface.
type MockUpdaterCategory struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterCategoryMockRecorder
}

// MockUpdaterCategoryMockRecorder is the mock recorder for MockUpdaterCategory.
type MockUpdaterCategoryMockRecorder struct {
	mock *MockUpdaterCategory
}

// NewMockUpdaterCategory creates a new mock instance.
func NewMockUpdaterCategory(ctrl *gomock.Controller) *MockUpdaterCategory {
	mock := &MockUpdaterCategory{ctrl: ctrl}
	mock.recorder = &MockUpdaterCategoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdaterCategory) EXPECT() *MockUpdaterCategoryMockRecorder {
	return m.recorder
}

// UpdateCategoryName mocks base method.
func (m *MockUpdaterCategory) UpdateCategoryName(ctx context.Context, id int64, name string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategoryName", ctx, id, name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategoryName indicates an expected call of UpdateCategoryName.
func (mr *MockUpdaterCategoryMockRecorder) UpdateCategoryName(ctx, id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategoryName", reflect.TypeOf((*MockUpdaterCategory)(nil).UpdateCategoryName), ctx, id, name)
}

// MockGetterCategory is a mock of GetterCategory interface.
type MockGetterCategory struct {
	ctrl     *gomock.Controller
	recorder *MockGetterCategoryMockRecorder
}

// MockGetterCategoryMockRecorder is the mock recorder for MockGetterCategory.
type MockGetterCategoryMockRecorder struct {
	mock *MockGetterCategory
}

// NewMockGetterCategory creates a new mock instance.
func NewMockGetterCategory(ctrl *gomock.Controller) *MockGetterCategory {
	mock := &MockGetterCategory{ctrl: ctrl}
	mock.recorder = &MockGetterCategoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetterCategory) EXPECT() *MockGetterCategoryMockRecorder {
	return m.recorder
}

// GetAllCategoryies mocks base method.
func (m *MockGetterCategory) GetAllCategoryies(ctx context.Context) ([]model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategoryies", ctx)
	ret0, _ := ret[0].([]model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategoryies indicates an expected call of GetAllCategoryies.
func (mr *MockGetterCategoryMockRecorder) GetAllCategoryies(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategoryies", reflect.TypeOf((*MockGetterCategory)(nil).GetAllCategoryies), ctx)
}
